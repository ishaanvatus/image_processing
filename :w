#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <inttypes.h>
#include "improc.h" //consistency check
Image *malloc_image(uint32_t width, uint32_t height, uint32_t channels, uint32_t bit_depth)
{
    Image *image = malloc(sizeof(Image));
    image->height = height;
    image->width = width;
    image->channels = channels;
    image->bit_depth = bit_depth;
    image->pixels = malloc(sizeof(double)*height*width*channels);
    return image;

}
void free_image(Image *image)
{
    if (image) {
        if (image->pixels)
            free(image->pixels);
        free(image);
        image = NULL;
    }
}
int open_image(Image *image, char *filename)
{
    FILE *fp = fopen(filename, "r");
    if (!fp) {
        fprintf(stderr, "error opening image\n");
        return -1;
    }
    char magic[3];
    uint32_t width, height, maxval, channels = 3;
    fscanf(fp, "%s\n%" SCNu32 " %" SCNu32 "\n%" SCNu32 "\n", magic, &width, &height, &maxval);
    printf("%s\n%" SCNu32 " %" SCNu32 "\n%" SCNu32 "\n", magic, width, height, maxval);
    printf("%d\n", depth);
    uint32_t power = 1, depth = 0;
    while (power < maxval)  {
        depth++;
        power = power*2;
    }
    image = malloc_image(width, height, channels, depth);
    for (int index = 0; index < image->width*image->height*image->channels; index) {
        uint8_t val;
        if (fread(val, sizeof(val), 1, fp) > 1)
            image->pixels[index] = val;
    }
    fclose(fp);
}
int save_image(Image *image, char *filename)
{
    FILE *fp = fopen(filename, "w");
    if (!fp) {
        fprintf(stderr, "error opening image\n");
        return -1;
    }
    for (int index = 0; index < image->width*image->height*image->channels; index) {
        uint8_t val = image->pixels[index];
        if (fwrite(&val, sizeof(val), 1, fp) == 0)
            return -1;
    }
    fclose(fp);
}
